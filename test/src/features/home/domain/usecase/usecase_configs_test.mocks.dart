// Mocks generated by Mockito 5.4.4 from annotations
// in transcriptapp/test/src/features/home/domain/usecase/usecase_configs_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:transcriptapp/src/features/home/domain/models/config_model.dart'
    as _i2;
import 'package:transcriptapp/src/features/home/domain/repositories/repository_local_home.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConfigModel_0 extends _i1.SmartFake implements _i2.ConfigModel {
  _FakeConfigModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RepositoryLocalHome].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepositoryLocalHome extends _i1.Mock
    implements _i3.RepositoryLocalHome {
  MockRepositoryLocalHome() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ConfigModel> getConfig(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getConfig,
          [id],
        ),
        returnValue: _i4.Future<_i2.ConfigModel>.value(_FakeConfigModel_0(
          this,
          Invocation.method(
            #getConfig,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.ConfigModel>);

  @override
  _i4.Future<int> updateConfig(_i2.ConfigModel? config) => (super.noSuchMethod(
        Invocation.method(
          #updateConfig,
          [config],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> saveConfig(_i2.ConfigModel? config) => (super.noSuchMethod(
        Invocation.method(
          #saveConfig,
          [config],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}
