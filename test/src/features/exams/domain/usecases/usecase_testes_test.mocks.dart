// Mocks generated by Mockito 5.4.4 from annotations
// in transcriptapp/test/src/features/exams/domain/usecases/usecase_testes_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:transcriptapp/src/features/exams/domain/models/exam_model.dart'
    as _i2;
import 'package:transcriptapp/src/features/exams/domain/models/question_model.dart'
    as _i6;
import 'package:transcriptapp/src/features/exams/domain/models/student_answer_model.dart'
    as _i7;
import 'package:transcriptapp/src/features/exams/domain/models/teste_model.dart'
    as _i3;
import 'package:transcriptapp/src/features/exams/domain/repositories/repository_remote_exams.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeExamModel_0 extends _i1.SmartFake implements _i2.ExamModel {
  _FakeExamModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTesteModel_1 extends _i1.SmartFake implements _i3.TesteModel {
  _FakeTesteModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RepositoryRemoteExams].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepositoryRemoteExams extends _i1.Mock
    implements _i4.RepositoryRemoteExams {
  MockRepositoryRemoteExams() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.ExamModel>> getListExams(int? studentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getListExams,
          [studentId],
        ),
        returnValue: _i5.Future<List<_i2.ExamModel>>.value(<_i2.ExamModel>[]),
      ) as _i5.Future<List<_i2.ExamModel>>);

  @override
  _i5.Future<_i2.ExamModel> getItemExam(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getItemExam,
          [id],
        ),
        returnValue: _i5.Future<_i2.ExamModel>.value(_FakeExamModel_0(
          this,
          Invocation.method(
            #getItemExam,
            [id],
          ),
        )),
      ) as _i5.Future<_i2.ExamModel>);

  @override
  _i5.Future<_i2.ExamModel> putExam({
    required int? id,
    required _i2.ExamModel? newExam,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putExam,
          [],
          {
            #id: id,
            #newExam: newExam,
          },
        ),
        returnValue: _i5.Future<_i2.ExamModel>.value(_FakeExamModel_0(
          this,
          Invocation.method(
            #putExam,
            [],
            {
              #id: id,
              #newExam: newExam,
            },
          ),
        )),
      ) as _i5.Future<_i2.ExamModel>);

  @override
  _i5.Future<List<_i3.TesteModel>> getListTestes(int? studentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getListTestes,
          [studentId],
        ),
        returnValue: _i5.Future<List<_i3.TesteModel>>.value(<_i3.TesteModel>[]),
      ) as _i5.Future<List<_i3.TesteModel>>);

  @override
  _i5.Future<_i3.TesteModel> getItemTeste(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getItemTeste,
          [id],
        ),
        returnValue: _i5.Future<_i3.TesteModel>.value(_FakeTesteModel_1(
          this,
          Invocation.method(
            #getItemTeste,
            [id],
          ),
        )),
      ) as _i5.Future<_i3.TesteModel>);

  @override
  _i5.Future<_i3.TesteModel> putTeste({
    required int? id,
    required _i3.TesteModel? newTeste,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putTeste,
          [],
          {
            #id: id,
            #newTeste: newTeste,
          },
        ),
        returnValue: _i5.Future<_i3.TesteModel>.value(_FakeTesteModel_1(
          this,
          Invocation.method(
            #putTeste,
            [],
            {
              #id: id,
              #newTeste: newTeste,
            },
          ),
        )),
      ) as _i5.Future<_i3.TesteModel>);

  @override
  _i5.Future<List<_i6.QuestionModel>> getListQuestions(int? examId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getListQuestions,
          [examId],
        ),
        returnValue:
            _i5.Future<List<_i6.QuestionModel>>.value(<_i6.QuestionModel>[]),
      ) as _i5.Future<List<_i6.QuestionModel>>);

  @override
  _i5.Future<bool> postStudentAnswer(_i7.StudentAnswerModel? answer) =>
      (super.noSuchMethod(
        Invocation.method(
          #postStudentAnswer,
          [answer],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<List<_i7.StudentAnswerModel>> getListStudentAnswers({
    required int? studentId,
    required int? testeId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getListStudentAnswers,
          [],
          {
            #studentId: studentId,
            #testeId: testeId,
          },
        ),
        returnValue: _i5.Future<List<_i7.StudentAnswerModel>>.value(
            <_i7.StudentAnswerModel>[]),
      ) as _i5.Future<List<_i7.StudentAnswerModel>>);

  @override
  _i5.Future<_i3.TesteModel> postTeste({
    required int? studentId,
    required int? examId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postTeste,
          [],
          {
            #studentId: studentId,
            #examId: examId,
          },
        ),
        returnValue: _i5.Future<_i3.TesteModel>.value(_FakeTesteModel_1(
          this,
          Invocation.method(
            #postTeste,
            [],
            {
              #studentId: studentId,
              #examId: examId,
            },
          ),
        )),
      ) as _i5.Future<_i3.TesteModel>);
}
