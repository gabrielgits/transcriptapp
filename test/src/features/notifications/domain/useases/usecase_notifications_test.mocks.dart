// Mocks generated by Mockito 5.4.4 from annotations
// in transcriptapp/test/src/features/notifications/domain/useases/usecase_notifications_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:transcriptapp/src/features/notifications/domain/models/notification_model.dart'
    as _i2;
import 'package:transcriptapp/src/features/notifications/domain/repositories/repository_local_notifications.dart'
    as _i5;
import 'package:transcriptapp/src/features/notifications/domain/repositories/repository_remote_notifications.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotificationModel_0 extends _i1.SmartFake
    implements _i2.NotificationModel {
  _FakeNotificationModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RepositoryRemoteNotifications].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepositoryRemoteNotifications extends _i1.Mock
    implements _i3.RepositoryRemoteNotifications {
  MockRepositoryRemoteNotifications() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.NotificationModel>> getList() => (super.noSuchMethod(
        Invocation.method(
          #getList,
          [],
        ),
        returnValue: _i4.Future<List<_i2.NotificationModel>>.value(
            <_i2.NotificationModel>[]),
      ) as _i4.Future<List<_i2.NotificationModel>>);

  @override
  _i4.Future<_i2.NotificationModel> getItem(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getItem,
          [id],
        ),
        returnValue:
            _i4.Future<_i2.NotificationModel>.value(_FakeNotificationModel_0(
          this,
          Invocation.method(
            #getItem,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.NotificationModel>);

  @override
  _i4.Future<_i2.NotificationModel> postItem(Map<String, dynamic>? jsonData) =>
      (super.noSuchMethod(
        Invocation.method(
          #postItem,
          [jsonData],
        ),
        returnValue:
            _i4.Future<_i2.NotificationModel>.value(_FakeNotificationModel_0(
          this,
          Invocation.method(
            #postItem,
            [jsonData],
          ),
        )),
      ) as _i4.Future<_i2.NotificationModel>);

  @override
  _i4.Future<_i2.NotificationModel> putItem({
    required int? id,
    required Map<String, dynamic>? jsonData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putItem,
          [],
          {
            #id: id,
            #jsonData: jsonData,
          },
        ),
        returnValue:
            _i4.Future<_i2.NotificationModel>.value(_FakeNotificationModel_0(
          this,
          Invocation.method(
            #putItem,
            [],
            {
              #id: id,
              #jsonData: jsonData,
            },
          ),
        )),
      ) as _i4.Future<_i2.NotificationModel>);

  @override
  _i4.Future<int> deleteItem(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteItem,
          [id],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}

/// A class which mocks [RepositoryLocalNotifications].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepositoryLocalNotifications extends _i1.Mock
    implements _i5.RepositoryLocalNotifications {
  MockRepositoryLocalNotifications() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.NotificationModel> getItem(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getItem,
          [id],
        ),
        returnValue:
            _i4.Future<_i2.NotificationModel>.value(_FakeNotificationModel_0(
          this,
          Invocation.method(
            #getItem,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.NotificationModel>);

  @override
  _i4.Future<int> saveItem(_i2.NotificationModel? item) => (super.noSuchMethod(
        Invocation.method(
          #saveItem,
          [item],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> updateItem(_i2.NotificationModel? item) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateItem,
          [item],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> deleteItem(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteItem,
          [id],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i2.NotificationModel>> getList() => (super.noSuchMethod(
        Invocation.method(
          #getList,
          [],
        ),
        returnValue: _i4.Future<List<_i2.NotificationModel>>.value(
            <_i2.NotificationModel>[]),
      ) as _i4.Future<List<_i2.NotificationModel>>);

  @override
  _i4.Future<int> saveList(List<_i2.NotificationModel>? list) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveList,
          [list],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> updateList(List<_i2.NotificationModel>? list) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateList,
          [list],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> deleteAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}
