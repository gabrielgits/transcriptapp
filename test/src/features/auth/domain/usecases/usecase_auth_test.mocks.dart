// Mocks generated by Mockito 5.4.4 from annotations
// in transcriptapp/test/src/features/auth/domain/usecases/usecase_auth_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:transcriptapp/src/features/auth/domain/models/student_model.dart'
    as _i2;
import 'package:transcriptapp/src/features/auth/domain/repositories/repository_local_auth.dart'
    as _i5;
import 'package:transcriptapp/src/features/auth/domain/repositories/repository_remote_auth.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStudentModel_0 extends _i1.SmartFake implements _i2.StudentModel {
  _FakeStudentModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RepositoryRemoteAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepositoryRemoteAuth extends _i1.Mock
    implements _i3.RepositoryRemoteAuth {
  @override
  _i4.Future<_i2.StudentModel> signinWithPhone({
    required String? phone,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signinWithPhone,
          [],
          {
            #phone: phone,
            #password: password,
          },
        ),
        returnValue: _i4.Future<_i2.StudentModel>.value(_FakeStudentModel_0(
          this,
          Invocation.method(
            #signinWithPhone,
            [],
            {
              #phone: phone,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.StudentModel>.value(_FakeStudentModel_0(
          this,
          Invocation.method(
            #signinWithPhone,
            [],
            {
              #phone: phone,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.StudentModel>);

  @override
  _i4.Future<bool> forgotPassword(String? email) => (super.noSuchMethod(
        Invocation.method(
          #forgotPassword,
          [email],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> recoveryPassword({
    required String? code,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recoveryPassword,
          [],
          {
            #code: code,
            #newPassword: newPassword,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> updatePassword(String? newPassword) => (super.noSuchMethod(
        Invocation.method(
          #updatePassword,
          [newPassword],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [RepositoryLocalAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepositoryLocalAuth extends _i1.Mock
    implements _i5.RepositoryLocalAuth {
  @override
  _i4.Future<_i2.StudentModel> getItem(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getItem,
          [id],
        ),
        returnValue: _i4.Future<_i2.StudentModel>.value(_FakeStudentModel_0(
          this,
          Invocation.method(
            #getItem,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.StudentModel>.value(_FakeStudentModel_0(
          this,
          Invocation.method(
            #getItem,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.StudentModel>);

  @override
  _i4.Future<int> saveItem(_i2.StudentModel? item) => (super.noSuchMethod(
        Invocation.method(
          #saveItem,
          [item],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> updateItem(_i2.StudentModel? item) => (super.noSuchMethod(
        Invocation.method(
          #updateItem,
          [item],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> deleteItem(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteItem,
          [id],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> updateStudentIdConfig(int? id) => (super.noSuchMethod(
        Invocation.method(
          #updateStudentIdConfig,
          [id],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}
